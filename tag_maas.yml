---
- name: Tag MAAS machines by hostname
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    maas_api_key: "wZaVDgSiTL9Qi6xy1Y:iAQtxbsRC7CDEVWER4:LgzJQLZHDXPar9e6uhLGv7XjhrkDlBNf"
    maas_url: "http://172.16.0.100:5240/MAAS"
    consumer_key: "{{ maas_api_key.split(':')[0] }}"
    token_key: "{{ maas_api_key.split(':')[1] }}"
    token_secret: "{{ maas_api_key.split(':')[2] }}"
    host_tag_map:
      cp-1: ["control-plane"]
      cp-2: ["control-plane"]
      cp-3: ["control-plane"]
      cp-4: ["control-plane"]
      worker-1: ["worker"]
      worker-2: ["worker"]
      worker-3: ["worker"]
      worker-4: ["worker"]
      etcd-1: ["etcd"]
      etcd-2: ["etcd"]
      etcd-3: ["etcd"]
      mysql-1: ["mysql"]
      mysql-2: ["mysql"]
      mysql-3: ["mysql"]
      vault-1: ["vault"]
      easyrsa-0: ["easyrsa"]
      lb-1: ["load-balancer"]
      spare-1: ["spare"]

  tasks:
    - name: Get all MAAS machines
      uri:
        url: "{{ maas_url }}/api/2.0/machines/"
        headers:
          Authorization: 'OAuth oauth_version="1.0",oauth_signature_method="PLAINTEXT",oauth_consumer_key="{{ consumer_key }}",oauth_token="{{ token_key }}",oauth_signature="&{{ token_secret }}",oauth_nonce="{{ lookup("pipe", "uuidgen") | replace("-", "") }}",oauth_timestamp="{{ lookup("pipe", "date +%s") }}"'
          Accept: "application/json"
        method: GET
        return_content: yes
      register: machines

    - name: Create machine list with tags
      set_fact:
        machines_with_tags: "{{ machines_with_tags | default([]) + [{'hostname': item.hostname, 'system_id': item.system_id, 'tags': host_tag_map[item.hostname] | default([])}] }}"
      loop: "{{ machines.json }}"
      when: item.hostname in host_tag_map

    - name: Get existing tags
      uri:
        url: "{{ maas_url }}/api/2.0/tags/"
        headers:
          Authorization: 'OAuth oauth_version="1.0",oauth_signature_method="PLAINTEXT",oauth_consumer_key="{{ consumer_key }}",oauth_token="{{ token_key }}",oauth_signature="&{{ token_secret }}",oauth_nonce="{{ lookup("pipe", "uuidgen") | replace("-", "") }}",oauth_timestamp="{{ lookup("pipe", "date +%s") }}"'
          Accept: "application/json"
        method: GET
        return_content: yes
      register: existing_tags_resp

    - name: Create missing tags
      uri:
        url: "{{ maas_url }}/api/2.0/tags/"
        headers:
          Authorization: 'OAuth oauth_version="1.0",oauth_signature_method="PLAINTEXT",oauth_consumer_key="{{ consumer_key }}",oauth_token="{{ token_key }}",oauth_signature="&{{ token_secret }}",oauth_nonce="{{ lookup("pipe", "uuidgen") | replace("-", "") }}",oauth_timestamp="{{ lookup("pipe", "date +%s") }}"'
          Accept: "application/json"
        method: POST
        body_format: form-urlencoded
        body:
          name: "{{ item }}"
          comment: "Created by Ansible for Juju tagging"
        status_code: 201
      loop: "{{ machines_with_tags | map(attribute='tags') | flatten | unique | difference(existing_tags_resp.json | map(attribute='name') | list) }}"

    - name: Build tag to system_id mapping
      set_fact:
        tag_system_map: "{{ tag_system_map | default({}) | combine({item.1: tag_system_map[item.1] | default([]) + [item.0.system_id]}) }}"
      loop: "{{ machines_with_tags | subelements('tags') }}"

    - name: Assign tags to machines
      uri:
        url: "{{ maas_url }}/api/2.0/tags/{{ item.key }}/?op=update_nodes"
        headers:
          Authorization: 'OAuth oauth_version="1.0",oauth_signature_method="PLAINTEXT",oauth_consumer_key="{{ consumer_key }}",oauth_token="{{ token_key }}",oauth_signature="&{{ token_secret }}",oauth_nonce="{{ lookup("pipe", "uuidgen") | replace("-", "") }}",oauth_timestamp="{{ lookup("pipe", "date +%s") }}"'
          Accept: "application/json"
        method: POST
        body_format: form-urlencoded
        body:
          add: "{{ item.value | join(',') }}"
        status_code: 200
      loop: "{{ tag_system_map | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
