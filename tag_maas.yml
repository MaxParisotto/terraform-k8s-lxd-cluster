---
- name: Tag MAAS machines by hostname
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    maas_api_key: "wZaVDgSiTL9Qi6xy1Y:iAQtxbsRC7CDEVWER4:LgzJQLZHDXPar9e6uhLGv7XjhrkDlBNf"
    maas_url: "http://172.16.0.100:5240/MAAS"
    consumer_key: "{{ maas_api_key.split(':')[0] }}"
    token_key: "{{ maas_api_key.split(':')[1] }}"
    token_secret: "{{ maas_api_key.split(':')[2] }}"
    host_tag_map:
      cp-1: ["control-plane"]
      cp-2: ["control-plane"]
      cp-3: ["control-plane"]
      cp-4: ["control-plane"]
      worker-1: ["worker"]
      worker-2: ["worker"]
      worker-3: ["worker"]
      worker-4: ["worker"]
      etcd-1: ["etcd"]
      etcd-2: ["etcd"]
      etcd-3: ["etcd"]
      mysql-1: ["mysql"]
      mysql-2: ["mysql"]
      mysql-3: ["mysql"]
      vault-1: ["vault"]
      haproxy-1: ["haproxy"]
      haproxy-2: ["haproxy"]



    # List of hostnames in the desired Juju machine order
    juju_hostnames:
      - cp-1
      - cp-2
      - cp-3
      - cp-4
      - worker-1
      - worker-2
      - worker-3
      - worker-4
      - etcd-1
      - etcd-2
      - etcd-3
      - mysql-1
      - mysql-2
      - mysql-3
      - vault-1
      - haproxy-1
      - haproxy-2

  tasks:

    # --- MAAS info and tagging logic ---

    - block:
        - name: Generate OAuth components (machines)
          set_fact:
            timestamp: "{{ lookup('pipe', 'date +%s') }}"
            nonce: "{{ lookup('pipe', 'uuidgen') | replace('-', '') }}"

        - name: Construct Authorization header (machines)
          set_fact:
            auth_header: >-
              OAuth oauth_version="1.0",oauth_signature_method="PLAINTEXT",oauth_consumer_key="{{ consumer_key }}",oauth_token="{{ token_key }}",oauth_signature="&{{ token_secret }}",oauth_nonce="{{ nonce }}",oauth_timestamp="{{ timestamp }}"

        - name: Get all MAAS machines
          uri:
            url: "{{ maas_url }}/api/2.0/machines/"
            headers:
              Authorization: "{{ auth_header }}"
              Accept: "application/json"
            method: GET
            return_content: yes
          register: machines
      name: Get all MAAS machines (with fresh OAuth)

    - name: Filter machines to tag
      set_fact:
        machines_to_tag: "{{ machines.json | selectattr('hostname', 'in', host_tag_map.keys() | list) | list }}"

    - name: Add tags to machines_to_tag
      set_fact:
        machines_to_tag_with_tags: "{{ machines_to_tag_with_tags | default([]) + [item | combine({'tags': host_tag_map[item.hostname] | default([])})] }}"
      loop: "{{ machines_to_tag }}"
      loop_control:
        label: "{{ item.hostname }}"

    - name: Build machine/tag pairs
      set_fact:
        machine_tag_pairs: "{{ machine_tag_pairs | default([]) + [{'system_id': item.0.system_id, 'hostname': item.0.hostname, 'tag': item.1}] }}"
      loop: "{{ query('subelements', machines_to_tag_with_tags, 'tags') }}"


    - block:
        - name: Generate OAuth components (get tags)
          set_fact:
            timestamp: "{{ lookup('pipe', 'date +%s') }}"
            nonce: "{{ lookup('pipe', 'uuidgen') | replace('-', '') }}"

        - name: Construct Authorization header (get tags)
          set_fact:
            auth_header: >-
              OAuth oauth_version="1.0",oauth_signature_method="PLAINTEXT",oauth_consumer_key="{{ consumer_key }}",oauth_token="{{ token_key }}",oauth_signature="&{{ token_secret }}",oauth_nonce="{{ nonce }}",oauth_timestamp="{{ timestamp }}"

        - name: Get existing tags
          uri:
            url: "{{ maas_url }}/api/2.0/tags/"
            headers:
              Authorization: "{{ auth_header }}"
              Accept: "application/json"
            method: GET
            return_content: yes
          register: existing_tags_resp
      name: Get existing tags (with fresh OAuth)

    - name: Set existing tag names
      set_fact:
        existing_tags: "{{ existing_tags_resp.json | map(attribute='name') | list }}"

    - name: Get unique tags to create
      set_fact:
        unique_tags: "{{ machine_tag_pairs | map(attribute='tag') | unique }}"


    - name: Create new tags
      block:
        - name: Generate OAuth components (create tag)
          set_fact:
            timestamp: "{{ lookup('pipe', 'date +%s') }}"
            nonce: "{{ lookup('pipe', 'uuidgen') | replace('-', '') }}"

        - name: Construct Authorization header (create tag)
          set_fact:
            auth_header: >-
              OAuth oauth_version="1.0",oauth_signature_method="PLAINTEXT",oauth_consumer_key="{{ consumer_key }}",oauth_token="{{ token_key }}",oauth_signature="&{{ token_secret }}",oauth_nonce="{{ nonce }}",oauth_timestamp="{{ timestamp }}"

        - name: Create new tag
          uri:
            url: "{{ maas_url }}/api/2.0/tags/"
            headers:
              Authorization: "{{ auth_header }}"
              Accept: "application/json"
            method: POST
            body_format: form-urlencoded
            body:
              name: "{{ item }}"
              comment: "Created by Ansible for Juju tagging"
            status_code: 201
          loop: "{{ unique_tags | difference(existing_tags) }}"
          loop_control:
            label: "{{ item }}"

    - name: Group system_ids by tag
      set_fact:
        tag_system_map: "{{ tag_system_map | default({}) | combine({item.tag: tag_system_map[item.tag] | default([]) + [item.system_id]}) }}"
      loop: "{{ machine_tag_pairs }}"


    - name: Assign tag to machines (with fresh OAuth per tag)
      uri:
        url: "{{ maas_url }}/api/2.0/tags/{{ item.key }}/?op=update_nodes"
        headers:
          Authorization: >-
            OAuth oauth_version="1.0",oauth_signature_method="PLAINTEXT",oauth_consumer_key="{{ consumer_key }}",oauth_token="{{ token_key }}",oauth_signature="&{{ token_secret }}",oauth_nonce="{{ lookup('pipe', 'uuidgen') | replace('-', '') }}",oauth_timestamp="{{ lookup('pipe', 'date +%s') }}"
          Accept: "application/json"
        method: POST
        body_format: form-urlencoded
        body:
          add: "{{ item.value }}"
        status_code: 200
        return_content: yes
      loop: "{{ tag_system_map | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      register: tag_results

    - name: Debug tag assignment results
      debug:
        msg: "{{ item }}"
      loop: "{{ tag_results.results }}"
      when: tag_results is defined

    # --- Render bundle.yaml from Jinja2 template with dynamic machines section ---
    - name: Build ordered list of MAAS system_ids for Juju hostnames
      set_fact:
        juju_machines_ordered: "{{ juju_hostnames | map('extract', host_to_system_id_map) | list }}"
      vars:
        host_to_system_id_map: >-
          {{ dict(machines_to_tag | map(attribute='hostname') | zip(machines_to_tag | map(attribute='system_id'))) }}
      when: machines_to_tag is defined

    - name: Render bundle.yaml from template with correct MAAS system IDs
      ansible.builtin.template:
        src: bundle.yaml.j2
        dest: ./bundle.yaml
      vars:
        juju_machines_ordered: "{{ juju_machines_ordered }}"
      when: juju_machines_ordered is defined

    # --- Render vault-pki-overlay.yaml from Jinja2 template with dynamic machines section ---


    - name: Set vault and vault-mysql-router machine numbers and system IDs
      set_fact:
        vault_machine_number: 15
        vault_mysql_router_machine_number: 16
        vault_system_id: "{{ host_to_system_id_map['vault-1'] }}"
        vault_mysql_router_system_id: "{{ host_to_system_id_map['haproxy-2'] }}"
      vars:
        host_to_system_id_map: >-
          {{ dict(machines_to_tag | map(attribute='hostname') | zip(machines_to_tag | map(attribute='system_id'))) }}
      when: machines_to_tag is defined

    - name: Set overlay_machines for overlay rendering
      set_fact:
        overlay_machines: >-
          {{ {
            vault_machine_number: {
              'series': 'noble',
              'constraints': 'cores=2 mem=8G root-disk=16G',
              'id': vault_system_id
            },
            vault_mysql_router_machine_number: {
              'series': 'noble',
              'constraints': 'cores=2 mem=8G root-disk=16G',
              'id': vault_mysql_router_system_id
            }
          } }}
      when: vault_machine_number is defined and vault_system_id is defined

    - name: Set overlay applications and relations for overlay rendering
      set_fact:
        overlay_applications:
          easyrsa: {}
          mysql-innodb-cluster:
            channel: latest/edge
            charm: mysql-innodb-cluster
            constraints: cores=2 mem=8G root-disk=64G
            num_units: 3
            options:
              enable-binlogs: true
              innodb-buffer-pool-size: 256M
              max-connections: 2000
              wait-timeout: 3600
          vault:
            channel: 1.7/stable
            charm: vault
            num_units: 1
            options:
              auto-generate-root-ca-cert: true
          vault-mysql-router:
            channel: latest/edge
            charm: mysql-router
        overlay_relations:
          - [etcd:certificates, vault:certificates]
          - [kubeapi-load-balancer:certificates, vault:certificates]
          - [kubernetes-control-plane:certificates, vault:certificates]
          - [kubernetes-worker:certificates, vault:certificates]
          - [mysql-innodb-cluster:db-router, vault-mysql-router:db-router]
          - [vault-mysql-router:shared-db, vault:shared-db]
      when: vault_machine_number is defined and vault_system_id is defined

    - name: Render vault-pki-overlay.yaml from template with correct MAAS system IDs
      ansible.builtin.template:
        src: vault-pki-overlay.yaml.j2
        dest: ./vault-pki-overlay.yaml
      vars:
        vault_machine_number: "{{ vault_machine_number }}"
        vault_mysql_router_machine_number: "{{ vault_mysql_router_machine_number }}"
        vault_system_id: "{{ vault_system_id }}"
        vault_mysql_router_system_id: "{{ vault_mysql_router_system_id }}"
        overlay_applications: "{{ overlay_applications }}"
        overlay_relations: "{{ overlay_relations }}"
        overlay_machines: "{{ overlay_machines }}"
      when: vault_machine_number is defined and vault_system_id is defined


